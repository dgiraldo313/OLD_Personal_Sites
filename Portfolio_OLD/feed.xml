<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daniel Giraldo Portfolio</title>
    <description>This is the personal website of Daniel Giraldo. Currently a Drew University graduate, looking to build up his brand as a freelance web developer.
</description>
    <link>http://www.danielgiraldo.com/</link>
    <atom:link href="http://www.danielgiraldo.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 17 Aug 2016 13:24:41 -0400</pubDate>
    <lastBuildDate>Wed, 17 Aug 2016 13:24:41 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Testing the Web</title>
        <description>&lt;p&gt;I gotta admit that I’ve never been the best at testing my code. Most of the times it seems as if I’m not asking the right questions, so it ends up being a “waste of time”. However, even though I hate doing it I always fight my urges of “just moving on” and I make sure that I come up with enough ways to try and break my code, because I do understand the importance of testing. I mean anyone who is a developer would agree that not testing your code is a way of setting up yourself for a future headache. Coding is almost like an illusion, one moment your program runs exactly how you expect it to run and the next you are banging your head against your desk because your program is “Magically” giving you errors (I say magically because all you did was go to the fridge to get a drink and when you got back nothing was the same). So I think we can all agree that the best way to keep our sanity is to formulate these questions that will allow us to understand where we went wrong.&lt;/p&gt;
&lt;p&gt;Nowadays testing is more popular than ever. As developers, we shouldn’t just use unit tests to make sure our code works correctly, we should actually implement tests that will help us write dryer and more efficient code; all from the get go. This technique is the core of Test Driven Development (TDD), as it gives developers a better scope of what they are trying to achieve. With this type of development we are able to see that the importance of testing is not so much so that we find bugs, but actually more so that we prevent them. However, as I stated earlier, testing can also become a “waste of time”. It’s actually very easy for a developer to write bad tests, as it can be the case that they are actually looking for the wrong things. That’s why I gotta restate that good testing comes from formulating great questions. If you are not able to look for the problems in the right place, then you won’t find them at all. &lt;/p&gt;
&lt;p&gt;As a Front End Developer, the kind of testing I perform on my code can actually be very different than your regular unit testing. Front End Development can be perceived as a very visual form of development, mainly because a lot of the code we write is particularly meant to write content to the DOM and affect the visual interaction of the user with the page. Many believe that this is actually a lot easier to test and debug, as you are able to visually see expected changes. However, in my opinion this could be a doubled-edge sword. On the one hand, yes, you are able to see when something goes wrong. On the other though, it could be very easy to ignore when things are not working as they should, since there could be many distractions on the page that could take your eyes off the problem. But then again, I guess that attention to detail is what separates the good developer from the great. Another reason why I believe Frond End Developers could have such a hard time in the development process and reaching the expected outcomes, is because of all the different environments that we constantly have to think about. When you are writing code for the web you not only have to worry about the different browsers and their versions, but also about the many different devices that exist all around the world.&lt;/p&gt;
&lt;p&gt;So to sum up, we as Front End developers not only have to worry about unit testing, but also about functional testing. The reason being: we not only need to make sure the code works, but also that it is is delivered to the user efficiently. As a result, I use many different tools that allow me to run both unit and functional tests on my projects. For unit testing I need to test the outcomes of the JavaScript code that I write to make sure they are behaving correctly. For this particular case I like to use &lt;a href=&quot;http://jasmine.github.io/&quot; target=&quot;_blank&quot;&gt; Jasmine.js&lt;/a&gt;. Jasmine is a very popular JavaScript framework that permits behavior-driven development. I like it because is super easy to understand, so it allows me to formulate better questions to test my code. On the other hand, for functional testing I usually like to refer to  the basics and use &lt;a href=&quot;https://developer.chrome.com/devtools&quot; target=&quot;_blank&quot;&gt;Chrome Dev Tools&lt;/a&gt;. This is actually a great tool for web development, as it has a ton of different plugins that one can use to make the process of debugging (whether it is routing, styles, performance, etc) a lot easier and accessible. All in all, testing defines who you are as a developer, no matter what kind of developer you are. Before you start your next project just think, do you want to set up yourself for success OR failure? You decide!&lt;p&gt;
&lt;/p&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jan 2016 16:24:30 -0500</pubDate>
        <link>http://www.danielgiraldo.com/blog/Testing-the-Web.html</link>
        <guid isPermaLink="true">http://www.danielgiraldo.com/blog/Testing-the-Web.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
